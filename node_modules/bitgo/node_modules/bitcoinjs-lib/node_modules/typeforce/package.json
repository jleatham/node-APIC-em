{
  "name": "typeforce",
  "version": "1.6.2",
  "description": "Another biased type checking solution for Javascript",
  "author": {
    "name": "Daniel Cousens"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/dcousens/typeforce.git"
  },
  "bugs": {
    "url": "https://github.com/dcousens/typeforce/issues"
  },
  "homepage": "https://github.com/dcousens/typeforce",
  "keywords": [
    "typeforce",
    "types",
    "typechecking",
    "type",
    "exceptions",
    "force"
  ],
  "scripts": {
    "coverage": "mocha --require blanket -R travis-cov",
    "coverage-local": "mocha --require blanket -R html-cov",
    "generate-test": "mocha scripts/__generate.js",
    "standard": "standard",
    "test": "npm run standard && npm run unit",
    "unit": "mocha"
  },
  "config": {
    "blanket": {
      "pattern": [
        ""
      ],
      "data-cover-never": [
        "node_modules",
        "test"
      ]
    },
    "travis-cov": {
      "threshold": 100
    }
  },
  "dependencies": {
    "inherits": "^2.0.1"
  },
  "devDependencies": {
    "blanket": "*",
    "mocha": "*",
    "standard": "*",
    "travis-cov": "*"
  },
  "readme": "# typeforce\n\n[![build status](https://secure.travis-ci.org/dcousens/typeforce.png)](http://travis-ci.org/dcousens/typeforce)\n[![Version](http://img.shields.io/npm/v/typeforce.svg)](https://www.npmjs.org/package/typeforce)\n\nAnother biased type checking solution for Javascript.\n\n## Examples\n\n``` javascript\nvar typeforce = require('typeforce')\n\nvar element = { prop: 'foo' }\nvar elementNumber = { prop: 2 }\nvar array = [element, element, elementNumber]\n\n// supported primitives 'Array', 'Boolean', 'Buffer', 'Number', 'Object', 'String'\ntypeforce('Array', array)\n\ntypeforce('Number', array)\n// TypeError: Expected Number, got Array\n\n// array types\ntypeforce(['Object'], array)\ntypeforce(typeforce.arrayOf('Object'), array)\n\n// supports recursive type templating\ntypeforce({ prop: 'Number' }, elementNumber)\n\n// maybe types\ntypeforce('?Number', 2)\ntypeforce('?Number', null)\ntypeforce(typeforce.maybe(typeforce.Number), 2)\ntypeforce(typeforce.maybe(typeforce.Number), null)\n\n// sum types\ntypeforce(typeforce.oneOf(['String', 'Number']))\n\n// value types\ntypeforce(typeforce.value(3.14), 3.14)\n\n// custom types\nfunction LongString (value, strict) {\n\tif (!typeforce.String(value)) return false\n\tif (value.length !== 32) return false\n\treturn true\n}\n\ntypeforce(LongString, '00000000000000000000000000000000')\n// => OK!\n\ntypeforce(LongString, 'not long enough')\n// TypeError: Expected LongString, got String 'not long enough'\n```\n\n**Pro**tips:\n\n``` javascript\n// use precompiled primitives for high performance\ntypeforce(typeforce.Array, array)\n\n// or just precompile a template\nvar type = {\n\tfoo: 'Number',\n\tbar: '?String'\n}\n\nvar fastType = typeforce.compile(type)\n// fastType => typeforce.object({\n//   foo: typeforce.Number,\n//   bar: typeforce.maybe(typeforce.String)\n// })\n\n// use strictness for recursive types to enforce whitelisting properties\ntypeforce({\n\tx: 'Number'\n}, { x: 1 }, true)\n// OK!\n\ntypeforce({\n\tx: 'Number'\n}, { x: 1, y: 2 }, true)\n// TypeError: Unexpected property 'y' of type Number\n```\n\n## License\n\nThis library is free and open-source software released under the MIT license.\n\n",
  "readmeFilename": "README.md",
  "_id": "typeforce@1.6.2",
  "dist": {
    "shasum": "b677edef8aa3a512792b33bf1f3d8ef3765435be"
  },
  "_from": "typeforce@^1.0.0",
  "_resolved": "https://registry.npmjs.org/typeforce/-/typeforce-1.6.2.tgz"
}
